#!/usr/bin/env python
"""
BIF 30806 Advanced bioinformatics
RNAseq data analysis project
Project selection: A
Perform a differential gene expression analysis comparing RNASeq data from two different conditions
Project Team: Cassava
Authors: Anna Deneer, Stefano Donati,Marta Godia, Jiao Long, Rik van Rosmalen 
"""


import os
import sys
import time
#from Bio import SeqIO
import argparse
from subprocess import check_call

def argument_parser():
        """
        parse system arguments into a variable args.
        """
        global args
	dest = """usage: %prog [options] reads.[fastaq|sra]+ 
	convert sra files to fastq format and use it or the given fastq files to implement 
	differential gene expression analysis pipeline """
	
	parser = argparse.ArgumentParser(description=dest)
        parser.add_argument('-f','--inputFormat',dest='inputFormat',nargs=1,required=True,default='fastq',help = '[Option 1] --inputFormat sra [pOption 2] --inputFormat fastq')
	parser.add_argument('-i','--inputFolder',dest='folder',required=True,nargs=2,default='',help = 'two directory path where stores the biological replicates datasets in two conditions either in sra or fastq format')
	parser.add_argument('-g', '--referenceGenome', dest='genome',nargs=1,required=True, default='',help='reference genome in GTF format')
	parser.add_argument('-q', '--fastqQuality', dest='offset',nargs=1, default=64,help='Fastq quality score illumina 1.3+ except 1.8 use Phred+64')
	#parser.add_argument('-c', '--conditions', dest='conditions',nargs=2, default='2',help='number of conditions')# extention: nr of conditions is flexible 
	parser.add_argument('-o', '--output', dest='output',nargs=1, default='output.txt',help='output file')
	args = parser.parse_args()

        #Validation of system argument variable
        	
        if os.path.isdir(args.folder[0]) == False or os.path.isdir(args.folder[1])==False:
                print >> sys.stderr, "[ERROR] Two valid directories path is expected. Please specify two directores path where stores experiment datasets"
                sys.exit(1)

        # more exceptions might be needed to be thrown.

def main():
        
	global args
        fastq_dump_path = '/local/prog/sratoolkit/bin/fastq-dump'
	argument_parser()
	count_c1 = 0
	count_c2 = 0
	c1_path = []
	c2_path = []
	
	
	if args.inputFormat==['sra']:# every argument parser option returns to a list of objects.
                fastq_dump(args,fastq_dump_path)        
        
        # count fastq files in each folder
        # pass the path and file name to a list as a tuple
        for file in os.listdir(args.folder[0]):
                if file.endswith('.fastq') or file.endswith('.fq'):
                        c1_path+=[(args.folder[0],file)]
                        count_c1 +=1
        for file in os.listdir(args.folder[1]):
                if file.endswith('.fastq')or file.endswith('.fq'):
                        c2_path+=[(args.folder[1],file)]
                        count_c2 +=1
        if count_c1 ==0 or count_c2 ==0: 
                print >> sys.stderr, "[ERROR] Under each given direcotry, fastq files are expected inside the directories."
                sys.exit(1)
        c1 = '%s '*count_c1
	c2 = '%s '*count_c2
        fastq_quality_trimmer(c1_path,c2_path)
        toc = time.clock()
	
#fastq-dump converts sra format files into fastq format.
def fastq_dump(args,fastq_dump_path):
        count_sra1 = 0
	count_sra2 = 0
        for file in os.listdir(args.folder[0]):
                tic = time.time()
                if file.endswith('.sra'):
                        check_call('%s --split-3 %s -Q 64 -O %s' % (fastq_dump_path,args.folder[0]+file,args.folder[0]),shell=True)#outputs one fastq file if single-ended, two or three fastq files if paired-ended.
                        count_sra1 +=1
                toc = time.time()
                print 'convert sra file %s in: %s sec' % (file,toc-tic)
        for file in os.listdir(args.folder[1]):
                tic = time.time()
                if file.endswith('.sra'):
                        check_call('%s --split-3 %s -Q 64 -O %s' % (fastq_dump_path,args.folder[1]+file,args.folder[1]),shell=True)
                        count_sra2 +=1
                toc = time.time()
                print 'convert sra file %s in: %s sec' % (file,toc-tic)
        if count_sra1==0 or count_sra2==0: 
                print >> sys.stderr, "[ERROR] Under each given direcotry, SRA files are expected inside the directories."
                sys.exit(1)        
       
#fastq_quality_trimmer
def fastq_quality_trimmer(c1_path,c2_path):
        for f in c1_path:
                tic = time.time()
		out = f[0]+os.path.splitext(f[1])[0]+'_trimmed.fastq'
		inp = f[0]+f[1]
               	check_call(['fastq_quality_trimmer','-t 30','-i',inp,'-o',out])
               	toc = time.time()
               	print 'trimming fastq file %s in: %s sec' % (f[1],toc-tic)
       	for f in c2_path:
                tic = time.time()
		out = f[0]+os.path.splitext(f[1])[0]+'_trimmed.fastq'
		check_call(['fastq_quality_trimmer','-t 30','-i',inp,'-o',out])
		toc = time.time()
		print 'trimming fastq file %s in: %s sec' % (f[1],toc-tic)

   
def process(): # following methods eg. filter(args), trimming(args)
        print '1'
##	good_reads = (rec for rec in SeqIO.parse("sample_1.fastq", "fastq") if min(rec.letter_annotations["phred_quality"]) >= 20)
##	count = SeqIO.write(good_reads, "good_quality.fastq", "fastq")
##	print("Saved %i reads" % count)
	
    	

######################################
# main                               #
######################################
if __name__ == "__main__":
	main()
