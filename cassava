#!/usr/bin/env python
"""
BIF 30806 Advanced bioinformatics
RNAseq data analysis project
Project selection: A
Perform a differential gene expression analysis comparing RNASeq data from two different conditions
Project Team: Cassava
Authors: Anna Deneer, Stefano Donati,Marta Godia, Jiao Long, Rik van Rosmalen 
"""


import os
import sys
#from Bio import SeqIO
import argparse
from subprocess import check_call

def argument_parser():
        """
        parse system arguments into a variable args.
        """
        global args
	dest= """usage: %prog [options] reads.[fastaq|sra]+ 
	convert sra files to fastq format and use it or the given fastq files to implement 
	differential gene expression analysis pipeline """
	
	parser = argparse.ArgumentParser(description=dest)
        parser.add_argument('-i','--inputFormat',dest='inputFormat',nargs=1,required=True,default='fastq',help = '[Option 1] --inputFormat sra [pOption 2] --inputFormat fastq')
	#parser.add_argument('-f','--fastq',dest='fq',nargs='*',default='',help = 'input fastq files')
	parser.add_argument('-f','--fastq-directory',dest='fastq',nargs=2,default='',help = 'two fastq files directory path where stores the biological replicates datasets in two conditions ')

	#parser.add_argument('-s','--sra-reader',dest='sra',default='',nargs='*',help = 'input sra files')
	parser.add_argument('-s','--sra-directory',dest='sra',nargs=2,default='',help = 'two sra files directory path where stores the biological replicates datasets in two conditions ')

	parser.add_argument('-g', '--referenceGenome', dest='genome',nargs='*',required=True, default='',help='genome in fasta format')
	parser.add_argument('-c', '--conditions', dest='conditions',nargs=2, default='2',help='number of conditions')
	parser.add_argument('-o', '--output', dest='output',nargs=1, default='output.txt',help='output file')
	args = parser.parse_args()
	
	if (args.fastq == '' and args.sra ==''):
                print >> sys.stderr, "[ERROR] No input file directory. Please specify two directores path where stores sra files"
                sys.exit(1)
     
        if not (os.path.isdir(args.fastq[0]) or os.path.isdir(args.sra[0])):
                print >> sys.stderr, "[ERROR] Incorrect system director"
                sys.exit(1)
        if (args.fastq != '' and args.sra !=''):
                print >> sys.stderr, "[ERROR] Too many arguments."
                sys.exit(1)
        
        # more exceptions need to be raise.
        
def main():
	global args
	argument_parser()
	if args.inputFormat==['sra']:# every argument parser option returns to a list of objects.
                fastq_dump(args)
                #usage:
                #args.inputFormat returns either ['sra'] or ['fastq'] ---->a list contains a single string
                #args.sra returns a list of two directory path ---->args.sra[0],args.sra[1]
                #args.fastq returns a list of two directory path ---->args.fastq[0],args.fastq[1]
                #to be continued with args:
                #for s_f in args.sra:
                #       for file in os.listdir(s_f):
                #               if file.endswith('.sra'): or if file.endswith('.fq'):
                #                       do something
                process(args) ###---------------------------here to start
	elif args.inputFormat==['fastq']:
                process(args) ###---------------------------here to start
                
	
def fastq_dump(args):
        
	count = 0 # number of sra files in the directories.
	for s_f in args.sra:
		#SRA toolkit "fastq-dump" utility:
		#fastq-dump --split-3 or -split-files converts sra file to single fastq output file if single-end sequencing
		#two or three fastq output files if paired sequencing. If it is paired-end sequencing data, 
		#Two files (with suffix "_1" and "_2") are matched mate-pair read file where as the third one (without any suffix) 
		#contains all the reads that do not have any mate-paires (or SRA couldn't resolve mate-paires for them).
 		#http://vinaykmittal.blogspot.nl/2012/02/how-to-extract-paired-end-reads-from.html
		#Therefore the files with suffix_1,_2 are not technical replicates, we have to take it into account. 

                for file in os.listdir(s_f):
                        if file.endswith('.sra'):
                                check_call('fastq-dump --split-3 %s -O %s' % (file,s_f),shell=True)
                                #converts sra files to fastq format and outputs to the original directory
                                #extension: converts to a tmp directory.
                                count+=1
			
        if count==0: 
                print >> sys.stderr, "[ERROR] No SRA files in the directory."
		sys.exit(1)
	
def process(): # following methods eg. filter(args), trimming(args)
        print 1
##	good_reads = (rec for rec in SeqIO.parse("sample_1.fastq", "fastq") if min(rec.letter_annotations["phred_quality"]) >= 20)
##	count = SeqIO.write(good_reads, "good_quality.fastq", "fastq")
##	print("Saved %i reads" % count)
	
    	

######################################
# main
######################################
if __name__ == "__main__":
	main()
